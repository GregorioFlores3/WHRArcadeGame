using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlatformEnemyController : MonoBehaviour
{
	public PlayerController player;
	public float walkSpeed = 1;
	public bool oscillate = true;
	public float edgeFindOffset = 0.16f;
	public float directionMultiplier = 1;
	public float hopStrength = 100;
	
	Vector3 edgeFindOffsetVector;
	bool _grounded = false;
	Vector3 lastPosition;
	
	Rigidbody2D rigidBody;
	SpriteRenderer spriteRenderer;
	
    // Start is called before the first frame update
    void Start()
    {
		lastPosition = transform.position;
		rigidBody = GetComponent<Rigidbody2D>();
		spriteRenderer = GetComponent<SpriteRenderer>();
        setEdgeFindOffsetVector();
    }

    // Update is called once per frame
    void Update()
    {
        if(oscillate && _grounded && goingOverEdge())
			flipDirection();
		
		rigidBody.velocity = new Vector2(walkSpeed * directionMultiplier, rigidBody.velocity.y);
	}
		
	void FixedUpdate() {
		if(stuck())
			tinyHopFix();
    }
	
	void setEdgeFindOffsetVector() {
		if(directionMultiplier < 0) {
			edgeFindOffsetVector = new Vector3(-edgeFindOffset, 0, 0);
		} else {
			edgeFindOffsetVector = new Vector3(edgeFindOffset, 0, 0);
		}
	}
	
	bool goingOverEdge() {
		RaycastHit2D hit = Physics2D.Raycast(transform.position + edgeFindOffsetVector, Vector2.down, 0.2f);
		
        return (hit.collider == null);
	}
	
	void flipDirection() {
		directionMultiplier *= -1;
		setEdgeFindOffsetVector();
		spriteRenderer.flipX = (directionMultiplier > 0);
	}
	
	void OnCollisionEnter2D(Collision2D collision)
     {
		if(collision.gameObject.name == "Player") {
			attackPlayer();
			return;
		}
		
		if(!_grounded && landing()) {
			land();
			return;
		}
     }
	 
	 bool stuck() {
		Vector3 displacement = transform.position - lastPosition;
		lastPosition = transform.position;
		return displacement.magnitude < 0.001;
	 }
	 
	 void attackPlayer() {
		 Debug.Log("attackPlayer");
		 hop();
		 
		 player.interactionController.interact(Interaction.basicAttack(this, 0.5f));
	 }
	 
	 bool landing() {
		RaycastHit2D hit = Physics2D.Raycast(transform.position, Vector2.down, 0.2f);
		
        return (hit.collider != null);
	 }
	 
	 void land() {
		 rigidBody.velocity = new Vector2(rigidBody.velocity.x, 0);
		 _grounded = true;
	 }
	 
	 void hop() {
		 rigidBody.AddForce(new Vector2(0, hopStrength));
		 _grounded = false;
	 }
	 
	 void tinyHopFix() {
		 if(_grounded)
			 tinyHop();
	 }
	 
	 void tinyHop() {
		 rigidBody.AddForce(new Vector2(0, hopStrength / 2));
		 _grounded = false;
	 }
}
